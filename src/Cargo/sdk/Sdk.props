<!--
  Copyright (c) Microsoft Corporation. All rights reserved.
  
  Licensed under the MIT license.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <UsingMicrosoftCargoSdk>true</UsingMicrosoftCargoSdk>
  </PropertyGroup>

  <PropertyGroup>
    <ManagedLanguageTargetsGotImported Condition="'$(MSBuildProjectExtension)' == '.csproj'">true</ManagedLanguageTargetsGotImported>
    <ManagedLanguageTargetsGotImported Condition="'$(MSBuildProjectExtension)' == '.vbproj'">true</ManagedLanguageTargetsGotImported>
    <ManagedLanguageTargetsGotImported Condition="'$(MSBuildProjectExtension)' == '.fsproj'">true</ManagedLanguageTargetsGotImported>
  </PropertyGroup>

  <Import Project="$(CustomBeforeCargoProps)" Condition=" '$(CustomBeforeCargoProps)' != '' And Exists('$(CustomBeforeCargoProps)') " />

  <PropertyGroup>
    <!-- Disable default Compile and EmbeddedResource items for Cargo projects -->
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    
    <!--
      NuGet should always restore Cargo projects with "PackageReference" style restore.  Setting this property will cause the right thing to happen even if there aren't any PackageReference items in the project.
    -->
    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>

    <!-- Targeting packs shouldn't be referenced as Cargo projects don't compile .net code. -->
    <DisableImplicitFrameworkReferences Condition="'$(DisableImplicitFrameworkReferences)' == ''">true</DisableImplicitFrameworkReferences>

    <!-- Disable publish actions -->
    <CopyBuildOutputToPublishDirectory Condition="'$(CopyBuildOutputToPublishDirectory)' == ''">false</CopyBuildOutputToPublishDirectory>
    <CopyOutputSymbolsToPublishDirectory Condition="'$(CopyOutputSymbolsToPublishDirectory)' == ''">false</CopyOutputSymbolsToPublishDirectory>

    <!-- Don't generate a deps file -->
    <GenerateDependencyFile Condition="'$(GenerateDependencyFile)' == ''">false</GenerateDependencyFile>

    <!-- Don't generate assembly info -->
    <GenerateAssemblyInfo Condition="'$(GenerateAssemblyInfo)' == ''">false</GenerateAssemblyInfo>

    <!-- Don't generate editor config file -->
    <GenerateMSBuildEditorConfigFile Condition="'$(GenerateMSBuildEditorConfigFile)' == ''">false</GenerateMSBuildEditorConfigFile>

    <!-- Don't log the high priority message mentioning this project's name (or copy the product we didn't build). -->
    <SkipCopyBuildProduct Condition="'$(SkipCopyBuildProduct)' == ''">true</SkipCopyBuildProduct>

    <!-- Don't automatically reference assembly packages since Cargo don't need reference assemblies -->
    <AutomaticallyUseReferenceAssemblyPackages Condition="'$(AutomaticallyUseReferenceAssemblyPackages)' == ''">false</AutomaticallyUseReferenceAssemblyPackages>
    <NoCompilerStandardLib Condition="'$(NoCompilerStandardLib)' == ''">false</NoCompilerStandardLib>
    <NoStdLib Condition="'$(NoStdLib)' == ''">true</NoStdLib>

    <!-- Disable Visual Studio's Fast Up-to-date Check and rely on MSBuild to determine -->
    <DisableFastUpToDateCheck Condition="'$(DisableFastUpToDateCheck)' == ''">true</DisableFastUpToDateCheck>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ProjectReference>
      <!--
        Setting ReferenceOutputAssembly skips target framework cross-project validation in NuGet.  Since Cargo projects don't define runtime
        constraints like a target framework, there's no point in checking the compatibilty of project references.
      -->
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
    </ProjectReference>
  </ItemDefinitionGroup>

  <Target Name="CreateManifestResourceNames" />

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" Condition=" '$(MicrosoftCommonPropsHasBeenImported)' != 'true' "/>

  <Import Project="$(CustomAfterCargoProps)" Condition=" '$(CustomAfterCargoProps)' != '' And Exists('$(CustomAfterCargoProps)') " />

  <!-- For CPS/VS support. Importing in .props allows any subsequent targets to redefine this if needed -->
  <Target Name="CompileDesignTime" />

  <!-- Rust specific props -->
  <PropertyGroup>
    <AuthMode Condition="'$(AuthMode)' == ''">false</AuthMode>
    <BuildCommandArgs Condition="'$(BuildCommandArgs)' == ''"></BuildCommandArgs>
    <TestCommandArgs Condition="'$(TestCommandArgs)' == ''"></TestCommandArgs>
    <CleanCommandArgs Condition="'$(CleanCommandArgs)' == ''"></CleanCommandArgs>
    <RunCommandArgs Condition="'$(RunCommandArgs)' == ''"></RunCommandArgs>
    <DocCommandArgs Condition="'$(DocCommandArgs)' == ''"></DocCommandArgs>
    <!--For internal Microsoft use only.-->
    <UseMsRustup Condition="'$(UseMsRustup)' == ''">false</UseMsRustup>
    <StartupProj Condition="'$(StartupProj)' == ''">$(MSBuildProjectFullPath)</StartupProj>
  </PropertyGroup>
  <ItemGroup>
    <None Include="**\*.rs" />
  </ItemGroup>
</Project>